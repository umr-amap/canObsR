[{"path":"https://umr-amap.github.io/canObsR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 managecrownsdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://umr-amap.github.io/canObsR/articles/Complete-installation.html","id":"why-the-installation-process-is-more-complex","dir":"Articles","previous_headings":"","what":"Why the installation process is more complex","title":"Complete installation","text":"installation canObsR involves several steps go beyond typical R package. package acts bridge different tools used processing imagery. Python integration: key processing steps rely specialized Python libraries. make work seamlessly R, use reticulate package, requires setting Python environment via Miniconda. allows us run Python scripts directly R functions. Environment setup: provide .yml file create dedicated Python environment required dependencies. ensures Python code used package runs reliably, regardless user‚Äôs system. Metashape integration: image processing steps rely Agisoft Metashape, commercial software. use features, Metashape must installed, valid license key must activated. Although setup may seem complex first, ensures installed, components work together smoothly.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://umr-amap.github.io/canObsR/articles/Complete-installation.html","id":"install-canobsr","dir":"Articles","previous_headings":"","what":"üì¶ Install canObsR","title":"Complete installation","text":"RStudio console","code":"install.packages(\"devtools\") library(devtools) install_github(\"https://github.com/umr-amap/canObsR.git\")"},{"path":"https://umr-amap.github.io/canObsR/articles/Complete-installation.html","id":"install-miniconda","dir":"Articles","previous_headings":"","what":"‚öôÔ∏è Install Miniconda","title":"Complete installation","text":"RStudio console","code":"install.packages(\"reticulate\") library(reticulate) reticulate::install_miniconda()"},{"path":"https://umr-amap.github.io/canObsR/articles/Complete-installation.html","id":"create-and-configurate-the-conda-environment","dir":"Articles","previous_headings":"","what":"üèó Create and configurate the conda environment","title":"Complete installation","text":"RStudio console","code":"library(canObsR)  YAML_file <- system.file(\"PYTHON/environment.yaml\", package = \"canObsR\") envname <- \"canObsR-env\" conda_exe <- detect_conda(auto_select = FALSE)  system2(conda_exe, args = c(\"env\", \"create\", \"-n\", envname, \"--file\", shQuote(YAML_file)))"},{"path":"https://umr-amap.github.io/canObsR/articles/Complete-installation.html","id":"install-de-metashape","dir":"Articles","previous_headings":"","what":"üèó Install de Metashape","title":"Complete installation","text":"environment just created contains already necessary dependences Metashape python API, required align photos using TimeSIFT. üîª Download .whl file : https://www.agisoft.com/downloads/installer/ Go ‚ÄúPython 3 module‚Äù section click link corresponding operating system. download file named ‚ÄúMetashape[‚Ä¶].whl‚Äù. , copy path downloaded .whl file RStudio console","code":"whl_file <- \".../Metashape-2.2.1-cp37.cp38.cp39.cp310.cp311-none-win_amd64.whl\"  use_condaenv(\"canObsR-env\", required = TRUE) if (file.exists(whl_file)) {   message(\"Installation of Metashape from the .whl file‚Ä¶\")   py_install(     packages = whl_file,     method = \"pip\"   ) } else {   warning(\"‚ùåÔ∏è File .whl not found : \", whl_file) }  py_module_available(\"Metashape\") # Should be TRUE"},{"path":"https://umr-amap.github.io/canObsR/articles/Complete-installation.html","id":"metashape-license-activation","dir":"Articles","previous_headings":"","what":"üîë Metashape license activation","title":"Complete installation","text":"python environment ready use now. However, Agisoft Metashape requires paid license order access features. necessary Metashape application installed device order python API work, whether application installed /activated, API still needs activated using license key (can used application already installed). RStudio console can also using Anaconda command prompt activate key, follow steps : Open anaconda command prompt Activate environnement just created : $ conda activate canObs_env start python activate licence : $ python >>> import Metashape >>> Metashape.license.activate(‚ÄúAAAA-BBBB-CCCC-DDDD‚Äù) # replace license key works, can close command prompt. good go ! üéâ","code":"install.packages(\"reticulate\") reticulate::py_run_string(\" import Metashape # Replace 'XXXXX-XXXXX-XXXXX-XXXXX-XXXXX' with your key license_key = 'XXXXX-XXXXX-XXXXX-XXXXX-XXXXX' if Metashape.license().activate(license_key):     print('‚úÖ Metashape Licence activated with success.') else:     print('‚ùå Metashape License not activated.') \")"},{"path":"https://umr-amap.github.io/canObsR/articles/Complete-installation.html","id":"restart-r","dir":"Articles","previous_headings":"","what":"üîÅ Restart R","title":"Complete installation","text":"RStudio console","code":"library(reticulate) library(canObsR)  use_condaenv(\"CanObsR-env\", required = TRUE)"},{"path":"https://umr-amap.github.io/canObsR/articles/Extract-crowns-data.html","id":"set-parameters","dir":"Articles","previous_headings":"","what":"Set parameters","title":"Extract-crowns-data","text":"Set path CanObsR_data folder, site name, Tmpfiles_directory want store temporary files specific folder N_cores number cores want allocate parallelized functions*. Note* : functions extract_crownsImages() extract_rgbValues() can produce lot temporary files need several GB memory depending size, resolution number mosaics. can specify want store temporary files. using test data just run following code get path RGB mosaics (imgs) dates images (dates).","code":"############## Set parameters --------------------------------------------------  # Path to the main directory path = 'XXXX/canObsR_data'  # Site site = 'Bouamir'  # Path to store the temp files Tmpfiles_directory = 'XXX/R_tmpdir' # NULL if you want to use the default folder  # Number of cores used for the paralelized functions N_cores = 10 # Path to the mosaics imgs <- list.files(file.path(path,'3_orthomosaics_aligned'), full.names = T)  # Extract the dates of the images dates <-     extr_dates(names_img = basename(imgs), n = 2, sep = '', extension = '.tif')"},{"path":"https://umr-amap.github.io/canObsR/articles/Extract-crowns-data.html","id":"first-step-test-the-crowns-shapefile-compatible","dir":"Articles","previous_headings":"","what":"First step : Test the crowns shapefile compatible","title":"Extract-crowns-data","text":"first step check crowns file compatibility function check_crownsFile. compatible package functions shapefile must : least variables ‚Äòid‚Äô, ‚Äòspecies‚Äô, ‚Äògenus‚Äô ‚Äòfamily‚Äô ‚Äòspecies‚Äô, ‚Äògenus‚Äô ‚Äòfamily‚Äô NA. Replace ‚Äòindet‚Äô ‚Äòid‚Äô duplicated values. check_crownsFile outputs","code":"############## STEP 1 Check and modify the crowns file  ------------------------  # Check the crowns file compatibility  check_crownsFile(    path_crowns = file.path(path,'crowns.gpkg')    ) # Output : Image 1 (1)  #------------------------------------------------------------------------------# #------------------------------------------------------------------------------#  # Rename variables  sf::read_sf(file.path(path,'crowns.gpkg')) %>%  # Load the file        rename(       family = tax_fam,          # Rename the corresponding variable as 'family'       genus = tax_gen,            # Rename the corresponding variable as 'genus'       species = tx_sp_lvl       # Rename the corresponding variable as 'species'    ) %>%        sf::write_sf(.,file.path(path,'crowns_corrected.gpkg')) # And save the file  # Check the new crowns file compatibility  check_crownsFile(    path_crowns = file.path(path,'crowns_corrected.gpkg')    ) # Output : Image 1 (2)  #------------------------------------------------------------------------------# #------------------------------------------------------------------------------#  # Rename NA to 'indet'  sf::read_sf(file.path(path,'crowns_corrected.gpkg')) %>%     # Load the new file        mutate(       # Rename NA to 'indet' in the family variable       family = case_when(is.na(family)~ 'indet', TRUE ~ family),              # Same for genus       genus = case_when(is.na(genus)~ 'indet', TRUE ~ genus),              # Same for species       species = case_when(is.na(species)~ paste(genus, 'indet'), TRUE ~ species)       ) %>%        sf::write_sf(.,file.path(path,'crowns_corrected.gpkg')) # And save the file  # Re-check the new crowns file compatibility  check_crownsFile(    path_crowns = file.path(path,'crowns_corrected.gpkg')    ) # Output : Image 1 (3)"},{"path":"https://umr-amap.github.io/canObsR/articles/Extract-crowns-data.html","id":"second-step-extract-crowns-images-per-date","dir":"Articles","previous_headings":"","what":"Second step : Extract crowns images per date","title":"Extract-crowns-data","text":"second step extract individual crown images per date function extract_crownsImages. function can used parallelization N_cores superior 1 can use lot memory (several GB). better specify store temporary files sur enought space. use test data, can take 15 minutes (). extract_crownsImages outputs files","code":"############## STEP 2 Extract crowns images ------------------------------------  extract_crownsImages(    path_images = imgs,                                         # Path to mosaics    path_crowns = file.path(path,'crowns_corrected.gpkg'), # Path to  crowns file    out_dir_path =  file.path(path,'4_crowns_img'),       # Path to output folder    tempdir_custom = Tmpfiles_directory,             # Path to tmp file directory    site = NULL,                  # If NULL, will be extract from the path_images    dates = NULL,                 # If NULL, will be extract from the path_images    N_cores = N_cores,                                          # Number of cores     width = 720,                                           # By default it is 720     height = 825                                           # By default it is 720  )"},{"path":"https://umr-amap.github.io/canObsR/articles/Extract-crowns-data.html","id":"third-step-extract-crowns-images-per-date","dir":"Articles","previous_headings":"","what":"Third step : Extract crowns images per date","title":"Extract-crowns-data","text":"extract_rgbValues outputs files","code":"############## STEP 3 Extract spectral indices from mosaics at the crown scale -  rgb_data <- extract_rgbValues (    path_images = imgs,                                         # Path to mosaics    path_crowns = file.path(path,'crowns_corrected.gpkg'), # Path to  crowns file    out_dir_path =  path,                                 # Path to output folder    tempdir_custom = Tmpfiles_directory,             # Path to tmp file directory    ncor = N_cores,                                             # Number of cores     sites = NULL,                 # If NULL, will be extract from the path_images    dates = NULL,                 # If NULL, will be extract from the path_images    file_type = '.xlsx'                   # Could be '.csv' or '.xlsx' or 'RData' )"},{"path":"https://umr-amap.github.io/canObsR/articles/Extract-crowns-data.html","id":"fouth-step-create-the-labeling-file-and-label-images","dir":"Articles","previous_headings":"","what":"Fouth step : Create the labeling file and label images","title":"Extract-crowns-data","text":"create_labelingFile create xlsx file can directly used shiny application (shiny_labels) labeling. shiny_visualisation","code":"############## STEP 4 Create file to do the labeling  --------------------------  create_labelingFile(    path_crowns = file.path(path,'crowns_corrected.gpkg'), # Path to  crowns file    site = site,                                                      # Site name    dates = dates,                                      # Dates of the RGB survey    out_dir_path = path)                                  # Path to output folder   # open it openXL(file.path(path,paste(site,'labelingFile',paste0(format(as.Date(Sys.Date(),format=\"%Y-%m-%d\"), format = \"%Y%m%d\"), '.xlsx'), sep = '_' ))) ############## STEP 5 Fill the labelingFile with shiny app  --------------------          # Import the labelingFile labeling_file <- file.path(    path,    paste('Bouamir_labelingFile',          paste0(             format(as.Date(Sys.Date(),format=\"%Y-%m-%d\"), format =\"%Y%m%d\"),             '.xlsx'),           sep = '_' )       )  # Start the app  shiny_labels(    data_labeling = labeling_file,    newFile = file.path(path,paste(site,'labelingFile_update.xlsx')),    imgFolder = file.path(path,'4_crowns_img') # Path to the crowns images folder    )"},{"path":"https://umr-amap.github.io/canObsR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugo Leblanc. Maintainer.","code":""},{"path":"https://umr-amap.github.io/canObsR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leblanc H, Tulet H, Ploton P (2025). canObsR: Process repetead UAV survey. R package version 0.0.0.9000, https://github.com/umr-amap/canObsR.","code":"@Manual{,   title = {canObsR: Process repetead UAV survey},   author = {Hugo Leblanc and Hadrien Tulet and Pierre Ploton},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/umr-amap/canObsR}, }"},{"path":"https://umr-amap.github.io/canObsR/index.html","id":"canobsr","dir":"","previous_headings":"","what":"Process repetead UAV survey","title":"Process repetead UAV survey","text":"package Installation Citation Documentation Generate orthomosaics","code":""},{"path":"https://umr-amap.github.io/canObsR/index.html","id":"the-package","dir":"","previous_headings":"","what":"The package","title":"Process repetead UAV survey","text":"canObsR aims streamlining, standardizing facilitating processing repetead UAV surveys R. focuses RGB data. notably allows generating 3D 4D mosaics & mosaics spatial alignment using state---art approaches, provides tools generate reference labels, segment crowns (now) classify crown phenophases (now).","code":""},{"path":"https://umr-amap.github.io/canObsR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Process repetead UAV survey","text":"installation canObsR involves several steps go beyond typical R package ensure seamless integration R, Python Metashape. avoid dependency conflicts enabling package‚Äôs full functionality must follow full installation process.","code":""},{"path":"https://umr-amap.github.io/canObsR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Process repetead UAV survey","text":"cite ‚ÄòcanObsR‚Äô, please use citation(‚ÄòcanObsR‚Äô).","code":""},{"path":"https://umr-amap.github.io/canObsR/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Process repetead UAV survey","text":"addition usual R package documentation, also extensive docs examples ","code":""},{"path":"https://umr-amap.github.io/canObsR/index.html","id":"generate-orthomosaics","dir":"","previous_headings":"","what":"Generate orthomosaics","title":"Process repetead UAV survey","text":"One main functions package generate orthomosaics align R, using Metashape AROSICS. guide step step workflow, download test dataset follow article. generation orthomosaics based Fabrice Vinatier & Denis Feurer‚Äôs work, Time-SIFT module Agisoft Metashape software (2023) Generate orthomosaics","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/align_Mosa.html","id":null,"dir":"Reference","previous_headings":"","what":"Align orthomosaics by using AROSICS in R ‚Äî align_Mosa","title":"Align orthomosaics by using AROSICS in R ‚Äî align_Mosa","text":"Implementation R pipeline uses AROSICS perform global local co-registration file group files located inside folder","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/align_Mosa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align orthomosaics by using AROSICS in R ‚Äî align_Mosa","text":"","code":"align_Mosa(   path_in,   ref_filepath,   out_dir_path,   corr_type = \"global\",   max_shift = 250L,   max_iter = 100L,   min_reliability = 60,   grid_res = 1000L,   window_size = NULL,   window_pos = list(NULL, NULL),   mp = NULL,   save_data = TRUE,   save_vector_plot = FALSE,   apply_matrix = FALSE )"},{"path":"https://umr-amap.github.io/canObsR/reference/align_Mosa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align orthomosaics by using AROSICS in R ‚Äî align_Mosa","text":"path_in chr. Path target image, folder containing multiple target images. Images must Geotiff format. ref_filepath chr. Path reference image. out_dir_path chr. Directory outputs saved. corr_type chr. Type co-registration. Either 'global' (default) 'local'. max_shift int. Maximum shift distance reference image pixel units max_iter int. Maximum number iterations matching (default: 5). min_reliability int. Minimum reliability threshold (percents), tie points marked false-positives. applies local co-registration. grid_res int. Tie point grid resolution pixels target image (x-direction). applies local co-registration. window_size int. Custom matching window size (pixels) (X, Y) tuple (default: (1000, 1000)). window_pos tuple. Custom matching window position (X, Y) map coordinate projection reference image (default: central position image overlap). used performing global co-registration. mp int. Number CPUs use. None (default), available CPUs used. mp=1, multiprocessing done. save_data logical. Saves transformation metadata .pkl file, tie points data csv file. latter happens performing local co-registration. save_vector_plot logical. saves map calculated tie point grid JPEG file. effect performing local co-registration. apply_matrix logical. correcting multiple images, applies shifts computed first image remaining ones, instead computing shifts independently. Allows better alignement faster computing time. WARNING : Currently, inputs images extent, temporary padded images need created. hope change soon ; , apply_matrix disabled default)","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/align_Mosa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align orthomosaics by using AROSICS in R ‚Äî align_Mosa","text":"None","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/align_Mosa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align orthomosaics by using AROSICS in R ‚Äî align_Mosa","text":"","code":"if (FALSE) { # \\dontrun{ library(reticulate)  align_Mosa(path_in = \"path_to_ortho.tif\",              ref_filepath = \"ref_image.tif\",              out_dir_path = \"my_output_dir\",              corr_type = \"local\",              grid_res = 500,              save_data = TRUE,              save_vector_plot = TRUE              )  align_Mosa(path_in = \"path_to_input_folder\",              ref_filepath = \"ref_image.tif\",              out_dir_path = \"my_output_dir\",              corr_type = \"local\",              grid_res = 500,              save_data = FALSE,              mp = 5,               )  align_Mosa(path_in = \"path_to_input_folder\",              ref_filepath = \"ref_image.tif\",              out_dir_path = \"my_output_dir\",              corr_type = \"global\",              max_shift = 200,              save_data = TRUE,              apply_matrix = TRUE,              mp = 1              )              } # }"},{"path":"https://umr-amap.github.io/canObsR/reference/check_availableCrowns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the number of crowns included in each image ‚Äî check_availableCrowns","title":"Check the number of crowns included in each image ‚Äî check_availableCrowns","text":"extend images can changed one image another, function return number crowns included image vector id contained id.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/check_availableCrowns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the number of crowns included in each image ‚Äî check_availableCrowns","text":"","code":"check_availableCrowns(path_bbox, crownsFile, dates = NULL)"},{"path":"https://umr-amap.github.io/canObsR/reference/check_availableCrowns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the number of crowns included in each image ‚Äî check_availableCrowns","text":"path_bbox path non NA Bbox return function extract_bboxImages() crownsFile sf object  crowns 'id' variable. dates chr. Vector dates (format '%Y%m%d', p.e '20220925'). order dates match order dates image path_bbox","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/check_availableCrowns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the number of crowns included in each image ‚Äî check_availableCrowns","text":"list dotchart","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/check_crownsFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the crowns file compatibility ‚Äî check_crownsFile","title":"Check the crowns file compatibility ‚Äî check_crownsFile","text":"Check crown file compatibility canObsR functions. crown file must least following variables 'id', 'family', 'genus' 'species' duplicated id.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/check_crownsFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the crowns file compatibility ‚Äî check_crownsFile","text":"","code":"check_crownsFile(path_crowns)"},{"path":"https://umr-amap.github.io/canObsR/reference/check_crownsFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the crowns file compatibility ‚Äî check_crownsFile","text":"path_crowns chr. Path crown delinetion shapefile","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/check_crownsFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the crowns file compatibility ‚Äî check_crownsFile","text":"Text give informations file. Indicates whether file compatible  functions package. Pay attention line starting 'X'.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/color_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector to associate color to label ‚Äî color_label","title":"Vector to associate color to label ‚Äî color_label","text":"Vector associate color label ggplot","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/color_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector to associate color to label ‚Äî color_label","text":"","code":"data(\"color_label\")"},{"path":"https://umr-amap.github.io/canObsR/reference/color_label.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vector to associate color to label ‚Äî color_label","text":"vector","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/color_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector to associate color to label ‚Äî color_label","text":"","code":"data('color_label')"},{"path":"https://umr-amap.github.io/canObsR/reference/create_files_architecture.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the recommended files architecture ‚Äî create_files_architecture","title":"Create the recommended files architecture ‚Äî create_files_architecture","text":"Create recommended files architecture.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/create_files_architecture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the recommended files architecture ‚Äî create_files_architecture","text":"","code":"create_files_architecture(path = NULL, main_folder_name = NULL)"},{"path":"https://umr-amap.github.io/canObsR/reference/create_files_architecture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the recommended files architecture ‚Äî create_files_architecture","text":"path chr. path create main folder main_folder_name chr. name main folder","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/create_labelingFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create xlsx labeling file ‚Äî create_labelingFile","title":"Create xlsx labeling file ‚Äî create_labelingFile","text":"function create xlsx file encode phenophase.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/create_labelingFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create xlsx labeling file ‚Äî create_labelingFile","text":"","code":"create_labelingFile(path_crowns, site, dates, out_dir_path = NULL)"},{"path":"https://umr-amap.github.io/canObsR/reference/create_labelingFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create xlsx labeling file ‚Äî create_labelingFile","text":"path_crowns chr. Path crown delinetion shapefile site chr. site name (p.e \"Bouamir\"). dates chr. vector dates (format '%Y-%m-%d' '%Y%m%d' '%Y_%m_%d'). out_dir_path chr. path directory used store images. defaut NULL, data saved return tibble. NULL, xlsx file saved.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/create_labelingFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create xlsx labeling file ‚Äî create_labelingFile","text":"tibble variable site, id, family, genus, species, n, obs, update, date, phenophase comments. n, obs, update, phenophase comments comments NULL. tibble can used shiny_labels() applications filled.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/create_nonNA_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and export the non NA area of images. ‚Äî create_nonNA_bbox","title":"Extract and export the non NA area of images. ‚Äî create_nonNA_bbox","text":"function extract area images covered non NA values return sf object one polygon per image.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/create_nonNA_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and export the non NA area of images. ‚Äî create_nonNA_bbox","text":"","code":"create_nonNA_bbox(path_in, dates = NULL, out_dir_path = NULL, filename = NULL)"},{"path":"https://umr-amap.github.io/canObsR/reference/create_nonNA_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and export the non NA area of images. ‚Äî create_nonNA_bbox","text":"path_in chr. Path folder mosaics located. dates chr. Vector dates (format '%Y%m%d', p.e '20220925'). order dates match order dates mosaics path_in folder. out_dir_path chr. Path directory used export vector files. One file export per date. NULL, vector exported. filename logical. Name files.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/crowns.html","id":null,"dir":"Reference","previous_headings":"","what":"crowns delineation data ‚Äî crowns","title":"crowns delineation data ‚Äî crowns","text":"Crowns delineation data","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/crowns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"crowns delineation data ‚Äî crowns","text":"","code":"data(\"crowns\")"},{"path":"https://umr-amap.github.io/canObsR/reference/crowns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"crowns delineation data ‚Äî crowns","text":"sf object 189 observations following 5 variables: id: Crown id family: family genus: genus species: species geom: geometry","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/crowns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"crowns delineation data ‚Äî crowns","text":"","code":"data(crowns)"},{"path":"https://umr-amap.github.io/canObsR/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"Full crowns data ‚Äî data","title":"Full crowns data ‚Äî data","text":"Full crowns data","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full crowns data ‚Äî data","text":"","code":"data(\"data\")"},{"path":"https://umr-amap.github.io/canObsR/reference/data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Full crowns data ‚Äî data","text":"tibble 131,656 observations following 23 variables: site : site name id: Crown id date: date rgb survey family: family genus: genus species: species type: type metric: metric band: band value: value7 PPfoliar1 : PPfoliar2 : PPFlo : PPFr : PPFlo_uncertainty : PPFr_uncertainty : desynchr : PPfoliar2_uncertainty : obs: Observer comments : comment update : date last update Usable_crown : crowns considered good ?","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full crowns data ‚Äî data","text":"","code":"data('data')"},{"path":"https://umr-amap.github.io/canObsR/reference/data_labeling.html","id":null,"dir":"Reference","previous_headings":"","what":"Labeling data ‚Äî data_labeling","title":"Labeling data ‚Äî data_labeling","text":"Labeling data","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/data_labeling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labeling data ‚Äî data_labeling","text":"","code":"data(\"data_labeling\")"},{"path":"https://umr-amap.github.io/canObsR/reference/data_labeling.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Labeling data ‚Äî data_labeling","text":"data.frame 9,450 observations following 12 variables: site: site name id: Crown id family: family genus: genus species: species n: Number individuals per species obs: Observer update: date last update date: date rgb survey phenophase: labels comments: comments Usable_crown: Usable_crown","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/data_labeling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labeling data ‚Äî data_labeling","text":"","code":"data(data_labeling)"},{"path":"https://umr-amap.github.io/canObsR/reference/detect_conda.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect conda installation or offer Miniconda installation ‚Äî detect_conda","title":"Detect conda installation or offer Miniconda installation ‚Äî detect_conda","text":"function automatically searches available conda executables common system paths. none found, offers install Miniconda using reticulate package.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/detect_conda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect conda installation or offer Miniconda installation ‚Äî detect_conda","text":"","code":"detect_conda(verbose = TRUE, auto_select = TRUE)"},{"path":"https://umr-amap.github.io/canObsR/reference/detect_conda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect conda installation or offer Miniconda installation ‚Äî detect_conda","text":"verbose Logical. TRUE (default), displays informational messages execution. auto_select Logical. TRUE (default), automatically selects conda path one found.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/detect_conda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect conda installation or offer Miniconda installation ‚Äî detect_conda","text":"character string full path selected conda executable, NULL conda found user declined Miniconda installation.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/detect_conda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect conda installation or offer Miniconda installation ‚Äî detect_conda","text":"function first checks conda available system PATH. , searches common installation directories Anaconda Miniconda. still installation found, user prompted install Miniconda. valid conda executable found (installed), directory added current R session PATH.","code":""},{"path":[]},{"path":"https://umr-amap.github.io/canObsR/reference/detect_conda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect conda installation or offer Miniconda installation ‚Äî detect_conda","text":"","code":"if (FALSE) { # \\dontrun{ # Basic detection detect_conda()  # Detection with interactive selection if multiple conda installations are found detect_conda(verbose = TRUE, auto_select = FALSE) } # }"},{"path":"https://umr-amap.github.io/canObsR/reference/extr_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dates from files names ‚Äî extr_dates","title":"Extract dates from files names ‚Äî extr_dates","text":"Extract dates files names","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extr_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dates from files names ‚Äî extr_dates","text":"","code":"extr_dates(names_img, n = 2, sep = \"_\", extension = \".gpkg\")"},{"path":"https://umr-amap.github.io/canObsR/reference/extr_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dates from files names ‚Äî extr_dates","text":"names_img chr. files basenames. n int. take character string number n separation. sep chr. separator extension chr. extension file names removed.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extr_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract dates from files names ‚Äî extr_dates","text":"","code":"names_img <- c(\"crown_896_Hylodendron gabunense_20220427.jpeg\",                \"crown_896_Hylodendron gabunense_20220511.jpeg\",                \"crown_896_Hylodendron gabunense_20220525.jpeg\")  extr_dates(names_img = names_img,            n = 4,            sep = '_',            extension = '.jpeg') #> [1] \"2022_04_27\" \"2022_05_11\" \"2022_05_25\"  extr_dates(names_img = names_img,            n = 4,            sep = ' ',            extension = '.jpeg') #> [1] \"20220427\" \"20220511\" \"20220525\""},{"path":"https://umr-amap.github.io/canObsR/reference/extract_crownsImages.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract crowns images ‚Äî extract_crownsImages","title":"Extract crowns images ‚Äî extract_crownsImages","text":"function extracts save .jpeg images crown date.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extract_crownsImages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract crowns images ‚Äî extract_crownsImages","text":"","code":"extract_crownsImages(   path_images,   path_crowns,   out_dir_path,   sites = NULL,   dates = NULL,   tempdir_custom = NULL,   N_cores = 1,   width = 720,   height = 825 )"},{"path":"https://umr-amap.github.io/canObsR/reference/extract_crownsImages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract crowns images ‚Äî extract_crownsImages","text":"path_images list full paths RGB rasters. path_crowns chr. Path crown delinetion shapefile out_dir_path chr. path directory use stored images. function create folder, need exists. sites chr. name site, p.e 'Mbalmayo'. dates chr. Vector dates (format '%Y_%m_%d', p.e '2022_09_25'). order dates match order dates image path_images tempdir_custom chr. Path store temporary files N_cores Number cores use parallelisation proccess. width num. width device height num. height device","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extract_crownsImages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract crowns images ‚Äî extract_crownsImages","text":"extract_crownsImages() create one folder per id save images. folder names 'crown_the idthe species name' exemple 'crown_5_Lophira alata'. images names 'crownthe idthe species namethe date.jpeg' exemple 'crown_5_Lophira alata_2022-11-08.jpeg'. function upload square image neighbouring trees title add top, image size 720*825 pixels defaut. image size can changed specifying height width parameters.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extract_crownsImages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract crowns images ‚Äî extract_crownsImages","text":"","code":"if (FALSE) { # \\dontrun{  imgs = list.files('my-path-to-images', full.names = T) path_crowns = \"my-path-to-crowns-shapefile\" out_dir_path = \"output-directory\"  extract_crownsImages(   path_images = imgs,   path_crowns = path_crowns,   out_dir_path =  out_dir_path ) } # }"},{"path":"https://umr-amap.github.io/canObsR/reference/extract_rgbValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract spectral indices from RGB at the crown scale ‚Äî extract_rgbValues","title":"Extract spectral indices from RGB at the crown scale ‚Äî extract_rgbValues","text":"function extracts RGB indices (red, green, blue, sumrgb, rcc, gcc, bcc, gndvi, gli) crown date. extracts value crown scale using exactextractr::exact_extract function. mean / variance can extracted (see 'fun' parameter).","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extract_rgbValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract spectral indices from RGB at the crown scale ‚Äî extract_rgbValues","text":"","code":"extract_rgbValues(   path_images,   path_crowns,   out_dir_path = NULL,   ncor = 1,   sites = NULL,   dates = NULL,   tempdir_custom = NULL,   file_type = \".RData\" )"},{"path":"https://umr-amap.github.io/canObsR/reference/extract_rgbValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract spectral indices from RGB at the crown scale ‚Äî extract_rgbValues","text":"path_images list full paths RGB rasters. path_crowns chr. Path crown delinetion shapefile out_dir_path chr. path directory use stored images ncor Number cores use parallelisation proccess. sites chr. name site, p.e 'Mbalmayo'. dates chr. vector dates (format 'YYYY_MM_DD', p.e '2022_09_25'). order dates match order path_images ! tempdir_custom chr. Path store temporary files file_type chr. default '.RData' can '.csv' '.xlsx'","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extract_rgbValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract spectral indices from RGB at the crown scale ‚Äî extract_rgbValues","text":"tibble variable site, id, date, family, genus, species, type, metric, band value.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/extract_rgbValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract spectral indices from RGB at the crown scale ‚Äî extract_rgbValues","text":"","code":"if (FALSE) { # \\dontrun{  imgs = list.files('my-path-to-images', full.names = T) path_crowns = \"my-path-to-crowns-shapefile\" out_dir_path = \"output-directory\"  rgb_data <- extract_rgbValues (   path_images = imgs,   path_crowns = path_crowns,   out_dir_path = out_dir_path,   ncor = 10,   sites = NULL,   dates = NULL ) } # }"},{"path":"https://umr-amap.github.io/canObsR/reference/generate_Mosa.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate orthomosaics ‚Äî generate_Mosa","title":"Generate orthomosaics ‚Äî generate_Mosa","text":"Implementation R pipeline performs Time-SIFT process time series drone images using Metashape python API. photos loaded aligned, orthomosaics (optionally) DEMs generated date flight.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/generate_Mosa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate orthomosaics ‚Äî generate_Mosa","text":"","code":"generate_Mosa(   path_in,   out_dir_ortho,   out_dir_DEM = NULL,   out_dir_project = NULL,   data_type = \"RGB\",   resol_ref = 0.05,   crs = \"EPSG::32622\",   site_name = \"\",   calibrate_col = TRUE,   sun_sensor = FALSE,   group_by_flight = FALSE,   downscale_factor_alignement = 1L,   downscale_factor_depth_map = 2L,   suffix = \"_\" )"},{"path":"https://umr-amap.github.io/canObsR/reference/generate_Mosa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate orthomosaics ‚Äî generate_Mosa","text":"path_in chr. Path folder data located. Inside folder, structure subfolders containing images accepted, long date specified folders' name YYYYMMDD/YYYYMM format. date used later distinct image belongs date building orthomosaics. out_dir_ortho chr. Folder orthomosaics saved. out_dir_DEM chr. Folder DEMs saved. path specified, DEMs saved default. out_dir_project chr. Folder Metashape project saved. path specified, project saved default. data_type chr. type data used. Either 'RGB' (default) 'MS' (multispectral images). resol_ref num. resolution (meters) used generate DEMs orthomosaics. Defaults 0.05. crs chr. Coordinate system used orthomosaic, string format. Example: crs=\"EPSG::32622\" (default value). site_name chr. Adds data site name names created folders files, better separate generated data different projects. specified, names stay generic. calibrate_col logical. Applies white balance. sun_sensor logical. Calibrates reflectance using sun sensor. applies multispectral images. group_by_flight logical. Regroups data flight (.e. one orthomosaic subfolder input folder containing images). FALSE, regroups date (default). downscale_factor_alignement int. Alignment accuracy (0 - Highest, 1 - High, 2 - Medium, 4 - Low, 8 - Lowest). Defaults 1. downscale_factor_depth_map int. Depth map quality (1 - Ultra high, 2 - High, 4 - Medium, 8 - Low, 16 - Lowest). Defaults 2. suffix chr. Text add end output filenames.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/generate_Mosa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate orthomosaics ‚Äî generate_Mosa","text":"None","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/generate_Mosa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate orthomosaics ‚Äî generate_Mosa","text":"","code":"if (FALSE) { # \\dontrun{ library(reticulate)  generate_Mosa(path_in = \"path_to_my_drone_data\",                out_dir_ortho = \"my_output_folder/ORTHO\",                #out_dir_DEM = \"my_output_folder/DEM\",                data_type = \"RGB\",                resol_ref = 0.5,                site_name = \"Bouamir\",                crs = \"EPSG::32633\"                )  generate_Mosa(path_in = \"path_to_my_drone_data\",                out_dir_ortho = \"my_output_folder/ORTHO\",                #out_dir_DEM = \"my_output_folder/DEM\",                data_type = \"MS\",                sun_sensor = TRUE,                crs = \"EPSG::32622\",                downscale_factor_depth_map = 4,                group_by_flight = TRUE,                suffix = \"_ORTHO\"                )                } # }"},{"path":"https://umr-amap.github.io/canObsR/reference/heatmap_Labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the heatmap of Labels ‚Äî heatmap_Labels","title":"Plot the heatmap of Labels ‚Äî heatmap_Labels","text":"fct function","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/heatmap_Labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the heatmap of Labels ‚Äî heatmap_Labels","text":"","code":"heatmap_Labels(   longLabels,   Species = NULL,   Genus = NULL,   Family = NULL,   title = NULL,   simplify = FALSE,   repro = FALSE )"},{"path":"https://umr-amap.github.io/canObsR/reference/heatmap_Labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the heatmap of Labels ‚Äî heatmap_Labels","text":"longLabels tibble dataframe long data format labels Species chr. Specifying species want filter Genus chr. Specifying genus want filter Family chr. Specifying family(ies) want filter title chr. title plot simplify logical. TRUE, plot use simplified labels instead raw labels. repro logical. TRUE, flowers fruits observations add plot.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/heatmap_Labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the heatmap of Labels ‚Äî heatmap_Labels","text":"return ggplot","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/merge_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge labels and rgb values ‚Äî merge_values","title":"Merge labels and rgb values ‚Äî merge_values","text":"function merge labels long format rgb metrics values.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/merge_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge labels and rgb values ‚Äî merge_values","text":"","code":"merge_values(   data_labeling,   rgb_data,   out_dir_path = NULL,   file_type = \".RData\" )"},{"path":"https://umr-amap.github.io/canObsR/reference/merge_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge labels and rgb values ‚Äî merge_values","text":"data_labeling tibble dataframe contains labels directly import xlsx file. rgb_data tibble dataframe rgb metrics values. out_dir_path chr. path directory use stored file file_type chr. default '.RData' can '.csv' '.xlsx'","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/merge_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge labels and rgb values ‚Äî merge_values","text":"tibble variable site, id, date, family, genus, species, phenophase, type, metric, band, value, obs, comments, update, Usable_crown.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/merge_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge labels and rgb values ‚Äî merge_values","text":"","code":"library(canObsR)  data('\"data_labeling\"') #> Warning: data set ‚Äò\"data_labeling\"‚Äô not found data('data_labeling') merge_values(data_labeling,rgb_data) #> # A tibble: 131,656 √ó 23 #>    site       id date       family   genus species phenophase type  metric band  #>    <fct>   <int> <date>     <fct>    <fct> <fct>   <chr>      <fct> <fct>  <fct> #>  1 Bouamir     1 2022-03-26 Fabaceae Pipt‚Ä¶ Piptad‚Ä¶ L          RGB   mean   red   #>  2 Bouamir     2 2022-03-26 Urticac‚Ä¶ Musa‚Ä¶ Musang‚Ä¶ L          RGB   mean   red   #>  3 Bouamir     3 2022-03-26 Fabaceae Dist‚Ä¶ Distem‚Ä¶ L          RGB   mean   red   #>  4 Bouamir     4 2022-03-26 Cannaba‚Ä¶ Celt‚Ä¶ Celtis‚Ä¶ L          RGB   mean   red   #>  5 Bouamir     5 2022-03-26 Fabaceae Dist‚Ä¶ Distem‚Ä¶ L          RGB   mean   red   #>  6 Bouamir     6 2022-03-26 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶ NA         RGB   mean   red   #>  7 Bouamir     7 2022-03-26 Sapotac‚Ä¶ Mani‚Ä¶ Manilk‚Ä¶ NA         RGB   mean   red   #>  8 Bouamir     8 2022-03-26 Urticac‚Ä¶ Musa‚Ä¶ Musang‚Ä¶ L          RGB   mean   red   #>  9 Bouamir     9 2022-03-26 Meliace‚Ä¶ Enta‚Ä¶ Entand‚Ä¶ NA         RGB   mean   red   #> 10 Bouamir    10 2022-03-26 Meliace‚Ä¶ Enta‚Ä¶ Entand‚Ä¶ NA         RGB   mean   red   #> # ‚Ñπ 131,646 more rows #> # ‚Ñπ 13 more variables: value <dbl>, PPfoliar1 <chr>, PPfoliar2 <chr>, #> #   PPFlo <dbl>, PPFr <dbl>, PPFlo_uncertainty <dbl>, PPFr_uncertainty <dbl>, #> #   desynchr <dbl>, PPfoliar2_uncertainty <dbl>, obs <chr>, comments <chr>, #> #   update <chr>, Usable_crown <chr>"},{"path":"https://umr-amap.github.io/canObsR/reference/pivot_Labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Format labels values from wide data to long data ‚Äî pivot_Labels","title":"Format labels values from wide data to long data ‚Äî pivot_Labels","text":"function format labels data wide long format","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/pivot_Labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format labels values from wide data to long data ‚Äî pivot_Labels","text":"","code":"pivot_Labels(labels_path, simplify_labels = FALSE, out_dir_path = NULL)"},{"path":"https://umr-amap.github.io/canObsR/reference/pivot_Labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format labels values from wide data to long data ‚Äî pivot_Labels","text":"labels_path chr. Path labeling file simplify_labels logical Decompose simplify labels TRUE. defaut FALSE. out_dir_path chr. path directory use stored result.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/pivot_Labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format labels values from wide data to long data ‚Äî pivot_Labels","text":"tibble","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/plot_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the spectral signal over time ‚Äî plot_signal","title":"Plot the spectral signal over time ‚Äî plot_signal","text":"fct function","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/plot_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the spectral signal over time ‚Äî plot_signal","text":"","code":"plot_signal(   data,   Species = NULL,   Genus = NULL,   Family = NULL,   Type = NULL,   Metric = \"mean\",   Band = NULL,   facet_by = \"band\",   slcted_id = NULL,   show_Labels = FALSE,   title = NULL )"},{"path":"https://umr-amap.github.io/canObsR/reference/plot_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the spectral signal over time ‚Äî plot_signal","text":"data tibble dataframe long data format labels Species chr. Specifying species want filter Genus chr. Specifying genus want filter Family chr. Specifying family(ies) want filter Type chr. Specifying type(s) want filter Metric chr. Specifying metric(s) want filter. defaut 'mean' Band chr. Specifying bande(s) want filter facet_by chr. Facetting variable. defaut 'band' slcted_id num. Highlighting id show_Labels logical. TRUE, shows phenophase labels plot. title chr. title plot","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/plot_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the spectral signal over time ‚Äî plot_signal","text":"return ggplot","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/rgb_data.html","id":null,"dir":"Reference","previous_headings":"","what":"RGB indices data ‚Äî rgb_data","title":"RGB indices data ‚Äî rgb_data","text":"RGB indices data","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/rgb_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RGB indices data ‚Äî rgb_data","text":"","code":"data(\"rgb_data\")"},{"path":"https://umr-amap.github.io/canObsR/reference/rgb_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RGB indices data ‚Äî rgb_data","text":"data.frame 131,656 observations following 10 variables: site: site name id: Crown id date: date rgb survey family: family genus: genus species: species type: type metric: metric band: band value: value","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/rgb_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RGB indices data ‚Äî rgb_data","text":"","code":"data(rgb_data)"},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Labeling shiny app ‚Äî shiny_labels","title":"Labeling shiny app ‚Äî shiny_labels","text":"Shiny app labeling based crowns images.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labeling shiny app ‚Äî shiny_labels","text":"","code":"shiny_labels(data_labeling = NULL, newFile = NULL, imgFolder = NULL)"},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labeling shiny app ‚Äî shiny_labels","text":"data_labeling tibble. Labeling file resulting create_labelingFile newFile chr. Path save new labeling file. imgFolder chr. Path crown images folder.","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labeling shiny app ‚Äî shiny_labels","text":"","code":"library(canObsR)  data(data_labeling) data_labeling #> # A tibble: 9,450 √ó 12 #>    site       id family   genus species     n obs   update date       phenophase #>    <chr>   <int> <chr>    <chr> <chr>   <int> <chr> <chr>  <date>     <chr>      #>  1 Bouamir     6 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #>  2 Bouamir    13 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #>  3 Bouamir    22 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #>  4 Bouamir    35 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #>  5 Bouamir    36 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #>  6 Bouamir    38 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #>  7 Bouamir    90 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 YN    2024_‚Ä¶ 2022-03-26 L          #>  8 Bouamir   100 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #>  9 Bouamir   103 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #> 10 Bouamir   124 Irvingi‚Ä¶ Desb‚Ä¶ Desbor‚Ä¶   837 NA    NA     2022-03-26 NA         #> # ‚Ñπ 9,440 more rows #> # ‚Ñπ 2 more variables: comments <chr>, Usable_crown <chr> # shiny_labels(data_labeling = data_labeling) # Run it"},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_visualisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualisation shiny app ‚Äî shiny_visualisation","title":"Visualisation shiny app ‚Äî shiny_visualisation","text":"Shiny app visualize crowns data (labels rgb indices).","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_visualisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualisation shiny app ‚Äî shiny_visualisation","text":"","code":"shiny_visualisation(data_labeling)"},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_visualisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualisation shiny app ‚Äî shiny_visualisation","text":"data_labeling tibble. Labeling file resulting create_labelingFile modify shiny_labels","code":""},{"path":"https://umr-amap.github.io/canObsR/reference/shiny_visualisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualisation shiny app ‚Äî shiny_visualisation","text":"","code":"library(canObsR)  # shiny_visualisation() # Run it"}]
